from pathlib import Path

path = Path("src/mastra/tools/vocabularyTools.ts")
text = path.read_text(encoding="utf-8")

old_quick = "      if (context.input && context.input.includes('|')) {\r\n        logger?.info('?Y\"? [AddCard] Parsing quick-add syntax:', { input: context.input });\r\n        \r\n        const parts = context.input.split('|').map(p => p.trim());\r\n        if (parts.length < 2) {\r\n          return {\r\n            success: false,\r\n            message: \"Quick-add format should be: front|back[|tags][|example]. Example: 'hund|dog|animals|Hunden springer snabbt'\"\r\n          };\r\n        }\r\n\r\n        const [front, back, tagsStr, example] = parts;\r\n        const tags = tagsStr ? tagsStr.split(',').map(t => t.trim()).filter(t => t.length > 0) : [];\r\n\r\n        const cardData: CreateCardData = {\r\n          owner_id: context.owner_id,\r\n          front,\r\n          back,\r\n          tags,\r\n          example: example || undefined,\r\n          lang_front: context.lang_front,\r\n          lang_back: context.lang_back,\r\n        };\r\n\r\n        logger?.info('?Y\"? [AddCard] Creating card with parsed data:', cardData);\r\n        const card = await createCard(cardData);\r\n\r\n        logger?.info('?o. [AddCard] Card created successfully:', { id: card.id, front: card.front, back: card.back });\r\n        return {\r\n          success: true,\r\n          card_id: card.id,\r\n          message: `Card created successfully! ${card.front} ??' ${card.back}${card.tags.length > 0 ? ` [${card.tags.join(', ')}]` : ''}`,\r\n          card: {\r\n            id: card.id,\r\n            front: card.front,\r\n            back: card.back,\r\n            tags: card.tags,\r\n            example: card.example,\r\n            lang_front: card.lang_front,\r\n            lang_back: card.lang_back,\r\n          }\r\n        };\r\n      }\r\n\r\n"

new_quick = "      if (context.input && context.input.includes(\"|\")) {\n        logger?.info(\"[AddCard] Parsing quick-add syntax:\", { input: context.input });\n\n        const parts = context.input.split(\"|\").map((part) => part.trim());\n        if (parts.length < 2) {\n          return {\n            success: false,\n            message: \"Quick-add format should be: front|back[|tags][|example]. Example: 'hund|dog|animals|Hunden springer snabbt'\",\n          };\n        }\n\n        const [front, back, tagsStr, example] = parts;\n        const tags = tagsStr\n          ? tagsStr.split(\",\").map((tag) => tag.trim()).filter((tag) => tag.length > 0)\n          : [];\n\n        const cardData: CreateCardData = {\n          owner_id: context.owner_id,\n          front,\n          back,\n          tags,\n          example: example or None,\n          lang_front: context.lang_front,\n          lang_back: context.lang_back,\n        };\n\n        logger?.info(\"[AddCard] Creating card with parsed data:\", cardData);\n\n        try {\n          const card = await createCard(cardData);\n\n          logger?.info(\"[AddCard] Card created successfully:\", { id: card.id, front: card.front, back: card.back });\n          return {\n            success: true,\n            card_id: card.id,\n            message: `Card created successfully! ${card.front} -> ${card.back}${card.tags.length > 0 ? ` [${card.tags.join(\", ")} ]` : \"\"}` ,\n            card: {\n              id: card.id,\n              front: card.front,\n              back: card.back,\n              tags: card.tags,\n              example: card.example,\n              lang_front: card.lang_front,\n              lang_back: card.lang_back,\n            },\n          };\n        } catch (error) {\n          if (error instanceof DuplicateCardError) {\n            logger?.info(\"[AddCard] Duplicate detected in quick-add:\", { ownerId: context.owner_id, front });\n            return await buildDuplicateResponse(context.owner_id, front, error);\n          }\n          throw error;\n        }\n      }\n\n"

text = text.replace(old_quick, new_quick)

# Similar replacement for guided flow block
old_guided = "      const cardData: CreateCardData = {\r\n        owner_id: context.owner_id,\r\n        front: context.front,\r\n        back: context.back,\r\n        tags,\r\n        example: context.example,\r\n        lang_front: context.lang_front,\r\n        lang_back: context.lang_back,\r\n      };\r\n\r\n      logger?.info('?Y\"? [AddCard] Creating card with guided data:', cardData);\r\n      const card = await createCard(cardData);\r\n\r\n      logger?.info('?o. [AddCard] Card created successfully:', { id: card.id, front: card.front, back: card.back });\r\n      return {\r\n        success: true,\r\n        card_id: card.id,\r\n        message: `Card created successfully! ${card.front} ??' ${card.back}${card.tags.length > 0 ? ` [${card.tags.join(', ')}]` : ''}`,\r\n        card: {\r\n          id: card.id,\r\n          front: card.front,\r\n          back: card.back,\r\n          tags: card.tags,\r\n          example: card.example,\r\n          lang_front: card.lang_front,\r\n          lang_back: card.lang_back,\r\n        }\r\n      };\r\n\r\n"

new_guided = "      const cardData: CreateCardData = {\n        owner_id: context.owner_id,\n        front: context.front,\n        back: context.back,\n        tags,\n        example: context.example,\n        lang_front: context.lang_front,\n        lang_back: context.lang_back,\n      };\n\n      logger?.info(\"[AddCard] Creating card with guided data:\", cardData);\n\n      try {\n        const card = await createCard(cardData);\n\n        logger?.info(\"[AddCard] Card created successfully:\", { id: card.id, front: card.front, back: card.back });\n        return {\n          success: true,\n          card_id: card.id,\n          message: `Card created successfully! ${card.front} -> ${card.back}${card.tags.length > 0 ? ` [${card.tags.join(\", ")} ]` : \"\"}` ,\n          card: {\n            id: card.id,\n            front: card.front,\n            back: card.back,\n            tags: card.tags,\n            example: card.example,\n            lang_front: card.lang_front,\n            lang_back: card.lang_back,\n          },\n        };\n      } catch (error) {\n        if (error instanceof DuplicateCardError) {\n          logger?.info(\"[AddCard] Duplicate detected in guided flow:\", { ownerId: context.owner_id, front: context.front });\n          return await buildDuplicateResponse(context.owner_id, context.front, error);\n        }\n        throw error;\n      }\n\n"

text = text.replace(old_guided, new_guided)

path.write_text(text, encoding="utf-8")
