

## üç∞ Prompt for Replit AI (Polling/Worker on Railway)

> **Goal:** Make this Node + TypeScript Telegram bot deployable on Railway as a **Worker** using **long polling** (no webhook).
> **Do not** require an HTTP server or a public URL.

**Tasks:**

1. **Entry & scripts**

   * Detect the real entry file (it should be `src/index.ts`).
   * In `package.json`, add:

     ```json
     {
       "type": "module",
       "scripts": {
         "dev": "mastra dev",
         "build": "tsc",
         "start": "tsx src/index.ts"
       },
       "engines": { "node": ">=20" }
     }
     ```

     (Install `tsx` as a devDependency if missing.)
   * If the project compiles to JS, you may instead use `"build": "tsc"` and `"start": "node dist/index.js"` with `outDir: "dist"` in `tsconfig.json`. Pick one approach and make it consistent.

2. **Telegram mode = long polling**

   * Ensure the bot **does not** set a webhook on startup.
   * If any webhook code exists, **guard it behind an env** (e.g., only run when `USE_WEBHOOK=true`).
   * Before `bot.launch()`, call:

     ```ts
     // optional but avoids conflicts if a webhook was set previously
     await bot.telegram.deleteWebhook().catch(() => {});
     await bot.launch();
     ```
   * Confirm there‚Äôs **no requirement to bind to a port** for this mode.

3. **Environment variables**

   * Read from `process.env` only. **No hard-coded secrets.**
   * Create a `.env.example` with:

     ```
     TELEGRAM_BOT_TOKEN=
     DATABASE_URL=
     NODE_ENV=production
     ```

     (Include any other keys the code expects.)

4. **TypeScript config**

   * In `tsconfig.json`, set:

     ```json
     {
       "compilerOptions": {
         "target": "ES2022",
         "module": "NodeNext",
         "moduleResolution": "NodeNext",
         "outDir": "dist",
         "esModuleInterop": true,
         "resolveJsonModule": true,
         "strict": true,
         "skipLibCheck": true
       },
       "include": ["src"]
     }
     ```

     (Adjust if the repo already has a working configuration; final result must run with `npm start`.)

5. **DB migrations (if any)**

   * If the app needs migrations at boot, add a small boot helper that runs them **once** before launching the bot, or document how to run them manually.
   * Fail gracefully with a clear console error if `DATABASE_URL` is missing.

6. **Logging & health**

   * Log a clear ‚ÄúBot started (polling)‚Äù message on successful launch.
   * Do **not** exit the process on handled errors; keep polling.

7. **Docs**

   * Update/append `README.md` with a ‚ÄúRailway (Worker) Deploy‚Äù section:

     * Local run:

       ```bash
       cp .env.example .env
       npm ci
       npm start
       ```
     * Railway variables to set: `TELEGRAM_BOT_TOKEN`, `DATABASE_URL`, `NODE_ENV=production`.
     * Railway Start Command:

       * `npm start` (or `npm run build && npm start` if compiling first)

**Acceptance criteria:**

* `npm start` runs locally (with `.env` set) and the bot responds in Telegram.
* Pushing to Railway as a **Worker** with env vars set boots successfully and keeps running.
* No webhook requirement in this path.

---

## ü™Ñ If you actually want **Webhook/Web** instead

Use this alternate prompt:

* Create a tiny HTTP server (Express/Fastify) that **listens on `process.env.PORT`** and exposes `/webhook/<secret>`.
* Only if `USE_WEBHOOK=true` and `PUBLIC_URL` is set, call `setWebhook(PUBLIC_URL + '/webhook/<secret>')` on startup.
* Add `"start": "tsx src/index.ts"` (or `node dist/index.js`) as above.
* Document Railway as a **Web Service** and how to set webhook (`PUBLIC_URL`, `USE_WEBHOOK=true`, `WEBHOOK_SECRET`).

---

## üöÄ Railway deploy steps (after AI finishes)

1. Push your repo to GitHub.
2. Railway ‚Üí New Project ‚Üí **Deploy from GitHub** ‚Üí choose **Worker** (for polling).
3. Add Variables:

   * `TELEGRAM_BOT_TOKEN=...`
   * `DATABASE_URL=...`
   * `NODE_ENV=production`
4. Start Command: `npm start` (or `npm run build && npm start`)
5. Open **Logs** ‚Üí confirm ‚ÄúBot started (polling)‚Äù. Test by messaging the bot.

---

If you paste the AI‚Äôs changes or any error from Railway logs, I‚Äôll fix them for you right away.